Know how to figure out these Big-Oh's

	O(log(n))
	O(n)
	O(1)
	O(n^2)
	O(n^1/2)
	O(sqrt(n))

Algorithm A is O(logn) and it completes a problem of size 1024 in 2 seconds.
How long will algorithm A take to complete a problem of size 4096?
	t/(log_2(4096)) = 2/(log_2(1024))
		12			=		10
		t  =  (2 * 12)/10 = 2 * 4s
How large a problem can be solved in 4 seconds using lagorithm A?
	log_2(n)/4	=	(log_2(1024))/2
	log_2(n) 	=	(10*4)/2	= 	20
		n		=	2^20

Algorithm B is O(2^n) and it completes a problem of size 1024 in 2 seconds.
How long will algorithm B take to complete a problem of size 4096?
	t/2^4096	=	2/2^1024
			t 	=	(2^1 * 2^4096)/2^1024
				=	2^3073 s
How large a problem can be solved in 4 seconds using algorithm B?
	2^n/4	=	2^1024/2
	2^n 	=	(2^1024 * 2^2)/2^1	=	2^1025
	n 	=	1025



	128	7
	256	8
	512	9
   1024	10
   2048	11
O(logn)

	1	10
	2	100
	3	1000
	4	10000
	5	100000
O(10^n)

	10	1110
	20	8420
	30	27930
	40	65640
	50	127550
O(n^3)

	

					Worst		Average
				________________________
Binary search 	|	O(logn)		O(logn)
Selection Sort	|	O(n^2)		O(n^2)
Inersion Sort	|	O(n^2)		O(n^2)
Merge Sort		|	O(nlogn)	O(nlogn)
Quick Sort		|	O(n^2)		O(nlogn)




Suppose the following list is given as input to binary search (with three-way compares ) and the search is looking for the value 77.
Give the part of the list in which the algorithm is still searching after each major step of the binary search algorithm,

 11 15 16 22 33 44 48 55 58 62 66 72 77 88 99
 	58 62	66	72 77	88	99
 		77 88 99
 			77



Consider the following program.

Stack S;	
List L;
S.push(4);
S.push(2);
S.push(1);
S.push(8);
while (!S.isEmpty())
	L.append(S.pop());

What are the contents of the list at the endo f the program?
	S: 4 2 1 8 (<-top)
	L: 8 1 2 4


Consider the following program.

Queue Q;
List L;
Q.add(4);
Q.add(2);
Q.add(1);
Q.add(8);
while (!Q.isEmpty())
	L.append(Q.remove())

What are the content of the list L at the end of the program?
	Q:	(Front->) 4 2 1 8 (<-Back)
	L: 	4 2 1 8


Consider the following program.

PriorityQueue Q;
List L;
Q.add(4);
Q.add(2);
Q.add(1);
Q.add(8);
while (!Q.isEmpty())
	L.append(Q.remove());

What are the contents of the list after the end of the program?
	Q: 4 2 1 8
	L: 1 2 4 8 //A priority Queue will come out highest 				//Priorty first (lowest number first)



Suppose the following list is given as input to insertion sort. Give the content of thel ist after each major step of insertion sort.
8 7 2 9 4 8 5 4 3

	8 | 7 2 9 4 8 5 4 3 
	7 8 | 2 9 4 8 5 4 3
	2 7 8 | 9 4 8 5 4 3
	2 7 8 9 | 4 8 5 4 3
	2 4 7 8 9 | 8 5 4 3
	2 4 7 8 8 9 | 5 4 3
	2 4 5 7 8 8 9 | 4 3
	2 4 4 5 7 8 8 9 | 3
	2 3 4 4 5 7 8 8 9 |



Suppose the following list is given as input to selection sort. Give the content of the list after each major step of selection sort.
8 7 2 9 4 8 5 4 3

	| 8 7 2 9 4 8 5 4 3
	2 | 7 8 9 4 8 5 4 3
	2 3 | 8 9 4 8 5 4 7
	2 3 4 | 9 8 8 5 4 7
	2 3 4 4 | 8 8 5 9 7
	2 3 4 4 5 | 8 8 9 7
	2 3 4 4 5 7 | 8 9 8
	2 3 4 4 5 7 8 | 9 8
	2 3 4 4 5 7 8 8 | 9


//If a list is size n these sorts will all ways do (n - 1) steps



Suppose the following list is given as input to merge sort. Give the lists that result from each split and merge step of merge sort.
8 2 7 4 4 8 5 1 


					8 2 7 4 4 8 5 1
split			8 2 7 4 		4 8 5 1
split		82		7 4		4 8 		5 1
split	8 	2		7   4	 4   8		5	1
merge		2 8		4 7		4 8			1 5
merge			2 4 7 8 		1 4 5 8
merge				1 2 4 4 5 7 8 8




Suppose the following list is given as input to quick sort. Give the lists that result from each partition and concatenate step of quick sort. 
Always use the item in the middle position as the quick-sort pivot. 
Use the simple partitioning algorithm (not the in-place partitioning algorithm).

	1 9 8 3 3 2 5 4 7
  12		33		98547	Partition //if there is no 	
- 1 2			4 5 987		partition //middle, use left one 
  					7 8 9	Partition
  12				789		Concatenate
  				45789		Concatenate
  		123345789



Show the steps of the quicksort in-place partitioning algorithm on the list.

				1 9 8 3 3 2 5 4 7
//This problem ^ is not on the test



If log_10(40) is 1.6,
what is log_10(4)?
	40 = 10 * 4
	1.6 = 1 + 0.6  //answer is 1.6
What is log_10(25)?
	4 * 25 = 100
  0.6 + 1.4 = 2  //answer is 1.4

  801 309 5361